// <auto-generated />
using System;
using ApiOpenBanking.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ApiOpenBanking.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20211017033652_teste-documento")]
    partial class testedocumento
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ApiOpenBanking.Models.Account", b =>
                {
                    b.Property<int>("personalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("brandName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("civilName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("contactsID")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("documentID")
                        .HasColumnType("int");

                    b.Property<bool>("hasBrazilianNationality")
                        .HasColumnType("bit");

                    b.Property<string>("maritalStatusAdditionalInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("maritalStatusCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("socialName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("personalID");

                    b.HasIndex("contactsID");

                    b.HasIndex("documentID");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("ApiOpenBanking.Models.CompanyCNPJ", b =>
                {
                    b.Property<string>("CNPJ")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AccountpersonalID")
                        .HasColumnType("int");

                    b.HasKey("CNPJ");

                    b.HasIndex("AccountpersonalID");

                    b.ToTable("CompanyCNPJs");
                });

            modelBuilder.Entity("ApiOpenBanking.Models.Contacts", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("ID");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("ApiOpenBanking.Models.Document", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("cpfNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("passportExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("passportIssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("passportNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("ApiOpenBanking.Models.Email", b =>
                {
                    b.Property<string>("email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ContactsID")
                        .HasColumnType("int");

                    b.Property<bool>("isMain")
                        .HasColumnType("bit");

                    b.HasKey("email");

                    b.HasIndex("ContactsID");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("ApiOpenBanking.Models.Filiation", b =>
                {
                    b.Property<string>("civilName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AccountpersonalID")
                        .HasColumnType("int");

                    b.Property<string>("socialName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("civilName");

                    b.HasIndex("AccountpersonalID");

                    b.ToTable("Filiations");
                });

            modelBuilder.Entity("ApiOpenBanking.Models.GeographicCoordinate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("longitude")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("GeographicCoordinates");
                });

            modelBuilder.Entity("ApiOpenBanking.Models.Nationality", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountpersonalID")
                        .HasColumnType("int");

                    b.Property<string>("otherNationalitiesInfo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AccountpersonalID");

                    b.ToTable("Nationalities");
                });

            modelBuilder.Entity("ApiOpenBanking.Models.OtherDocument", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountpersonalID")
                        .HasColumnType("int");

                    b.Property<int?>("NationalityID")
                        .HasColumnType("int");

                    b.Property<string>("additionalInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("checkDigit")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("expirationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("issueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("typeAdditionalInfo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AccountpersonalID");

                    b.HasIndex("NationalityID");

                    b.ToTable("OtherDocuments");
                });

            modelBuilder.Entity("ApiOpenBanking.Models.Phone", b =>
                {
                    b.Property<string>("number")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ContactsID")
                        .HasColumnType("int");

                    b.Property<string>("additionalInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("areaCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("countryCallingCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isMain")
                        .HasColumnType("bit");

                    b.Property<string>("phoneExtension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("number");

                    b.HasIndex("ContactsID");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("ApiOpenBanking.Models.PostalAdress", b =>
                {
                    b.Property<string>("postCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("additionalInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("countryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("countrySubDivision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("districtName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("geographicCoordinatesID")
                        .HasColumnType("int");

                    b.Property<string>("ibgeTownCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isMain")
                        .HasColumnType("bit");

                    b.Property<string>("townName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("postCode");

                    b.HasIndex("geographicCoordinatesID");

                    b.ToTable("PostalAdresses");
                });

            modelBuilder.Entity("ApiOpenBanking.Models.Account", b =>
                {
                    b.HasOne("ApiOpenBanking.Models.Contacts", "contacts")
                        .WithMany()
                        .HasForeignKey("contactsID");

                    b.HasOne("ApiOpenBanking.Models.Document", "document")
                        .WithMany()
                        .HasForeignKey("documentID");

                    b.Navigation("contacts");

                    b.Navigation("document");
                });

            modelBuilder.Entity("ApiOpenBanking.Models.CompanyCNPJ", b =>
                {
                    b.HasOne("ApiOpenBanking.Models.Account", null)
                        .WithMany("companyCnpj")
                        .HasForeignKey("AccountpersonalID");
                });

            modelBuilder.Entity("ApiOpenBanking.Models.Email", b =>
                {
                    b.HasOne("ApiOpenBanking.Models.Contacts", null)
                        .WithMany("emails")
                        .HasForeignKey("ContactsID");
                });

            modelBuilder.Entity("ApiOpenBanking.Models.Filiation", b =>
                {
                    b.HasOne("ApiOpenBanking.Models.Account", null)
                        .WithMany("filiation")
                        .HasForeignKey("AccountpersonalID");
                });

            modelBuilder.Entity("ApiOpenBanking.Models.Nationality", b =>
                {
                    b.HasOne("ApiOpenBanking.Models.Account", null)
                        .WithMany("nationality")
                        .HasForeignKey("AccountpersonalID");
                });

            modelBuilder.Entity("ApiOpenBanking.Models.OtherDocument", b =>
                {
                    b.HasOne("ApiOpenBanking.Models.Account", null)
                        .WithMany("otherDocuments")
                        .HasForeignKey("AccountpersonalID");

                    b.HasOne("ApiOpenBanking.Models.Nationality", null)
                        .WithMany("documents")
                        .HasForeignKey("NationalityID");
                });

            modelBuilder.Entity("ApiOpenBanking.Models.Phone", b =>
                {
                    b.HasOne("ApiOpenBanking.Models.Contacts", null)
                        .WithMany("phones")
                        .HasForeignKey("ContactsID");
                });

            modelBuilder.Entity("ApiOpenBanking.Models.PostalAdress", b =>
                {
                    b.HasOne("ApiOpenBanking.Models.GeographicCoordinate", "geographicCoordinates")
                        .WithMany()
                        .HasForeignKey("geographicCoordinatesID");

                    b.Navigation("geographicCoordinates");
                });

            modelBuilder.Entity("ApiOpenBanking.Models.Account", b =>
                {
                    b.Navigation("companyCnpj");

                    b.Navigation("filiation");

                    b.Navigation("nationality");

                    b.Navigation("otherDocuments");
                });

            modelBuilder.Entity("ApiOpenBanking.Models.Contacts", b =>
                {
                    b.Navigation("emails");

                    b.Navigation("phones");
                });

            modelBuilder.Entity("ApiOpenBanking.Models.Nationality", b =>
                {
                    b.Navigation("documents");
                });
#pragma warning restore 612, 618
        }
    }
}
